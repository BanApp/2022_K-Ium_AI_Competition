##################################

소스코드 주석에 훨씬 자세하게 작성해놨습니다.

##################################



=========<모델학습_소스코드>=========

1. .ipynb 확장자는 코랩, .py 확장자는 파이썬 ide를 통해서 실행 가능합니다.

2. transformer 모듈을 반드시 설치해야 합니다.(pip install transformers)

3. data_path 변수에 학습 데이터의 경로를 넣어줍니다. 이는 파이썬 input() 함수로 받습니다.

4. x 변수에 학습 데이터와 테스트 데이터를 나누는 인덱스값을 정수값으로 넣습니다. 이는 파이썬 input() 함수로 받습니다.

5. batch_size 변수의 숫자에 따라서 학습 배치 사이즈가 정해집니다.(기본값 16)

6. Epochs 변수의 숫자에 따라서 epcoch 수가 정해집니다.(기본값 4)

7. 위의 input()으로 받는 값들을 입력해주면 자동으로 학습이 시작됩니다.

7. s_path 변수에 학습된 모델의 저장경로를 입력하면 저장됩니다. 이는 파이썬 input() 함수로 받습니다.





=========<데이터 전처리 및 모델 호출 소스코드>=========

1. .ipynb 확장자는 코랩, .py 확장자는 파이썬 ide를 통해서 실행 가능합니다.

2. transformer 모듈을 반드시 설치해야 합니다.(pip install transformers)

3. model_path 변수에 모델의 경로를 넣어줍니다. 모델 파일들은 /Model에 존재합니다. 이는 파이썬 input() 함수로 받습니다.

4. BertTokenizer.from_pretrained 함수를 통해서 토크나이저를 할당 받고, BertForSequenceClassification.from_pretrained를 통해서 모델을 할당받습니다. 

5. data_path 변수에 테스트 및 평가 데이터의 경로를 넣어줍니다. 이는 파이썬 input() 함수로 받습니다.

6. test_ans 리스트에 분류 결과가 정답으로 담기고, test_prob 리스트에 이진 분류 결과의 확률([0~1,0~1])이 담깁니다.

7. 분류 결과 나온 데이터들을 바탕으로 모델평가가 가능합니다.